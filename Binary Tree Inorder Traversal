#Given a binary tree, return the inorder traversal of its nodes' values.

#Example:

#Input: [1,null,2,3]
#   1
#    \
#     2
#    /
#   3

#Output: [1,3,2]
#Follow up: Recursive solution is trivial, could you do it iteratively?

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root == None:
            return []
        temp = root
        stack =[temp]
        ans =[]
        while len(stack)>0:
            temp1 = stack.pop()
            if temp1.left == None and temp1.right == None:
                ans.append(temp1.val)
                continue
            if temp1.right != None:
                stack.append(temp1.right)
                temp1.right = None
            stack.append(temp1)
            if temp1.left != None:
                stack.append(temp1.left)
                temp1.left = None
        return ans
